export type Role='user'|'admin'
export type User={uid:string,email:string,password:string,name?:string,surname?:string,address?:string,phone?:string,social?:string,avatar?:string,role?:Role,createdAt:number,updatedAt:number}
const USERS_KEY='iz_users',CURRENT_KEY='iz_current_uid'
function loadUsers():User[]{try{return JSON.parse(localStorage.getItem(USERS_KEY)||'[]')}catch{return[]}}
function saveUsers(list:User[]){localStorage.setItem(USERS_KEY,JSON.stringify(list))}
export function currentUser():User|null{const uid=localStorage.getItem(CURRENT_KEY);if(!uid)return null;return loadUsers().find(u=>u.uid===uid)||null}
export function signOut(){localStorage.removeItem(CURRENT_KEY)}
export function signIn(email:string,password:string):User{const u=loadUsers().find(u=>u.email.toLowerCase()===email.toLowerCase());if(!u)throw new Error('User not found');if(u.password!==password)throw new Error('Invalid password');localStorage.setItem(CURRENT_KEY,u.uid);return u}
export function createUser(data:Partial<User>&{email:string;password:string}):User{const list=loadUsers();if(list.some(u=>u.email.toLowerCase()===data.email.toLowerCase()))throw new Error('Email already exists');const uid=crypto.randomUUID(),now=Date.now();const user:User={uid,email:data.email,password:data.password,name:data.name||'',surname:data.surname||'',address:data.address||'',phone:data.phone||'',social:data.social||'',avatar:data.avatar||'',role:(list.length===0?'admin':'user'),createdAt:now,updatedAt:now};list.push(user);saveUsers(list);localStorage.setItem(CURRENT_KEY,uid);return user}
export function updateUser(uid:string,patch:Partial<User>):User{const list=loadUsers();const i=list.findIndex(u=>u.uid===uid);if(i<0)throw new Error('User not found');list[i]={...list[i],...patch,updatedAt:Date.now()};saveUsers(list);return list[i]}
export function changeEmailPassword(uid:string,opts:{email?:string;password?:string}){const list=loadUsers();const i=list.findIndex(u=>u.uid===uid);if(i<0)throw new Error('User not found');if(opts.email&&opts.email.toLowerCase()!==list[i].email.toLowerCase()){if(list.some(u=>u.email.toLowerCase()===opts.email!.toLowerCase()))throw new Error('Email already in use');list[i].email=opts.email!}if(opts.password){list[i].password=opts.password!}list[i].updatedAt=Date.now();saveUsers(list);return list[i]}
export type ListOpts={search?:string;role?:Role|'all';sort?:'new'|'old'|'name'};export function listUsers(opts:ListOpts={}):User[]{let rows=loadUsers();if(opts.role&&opts.role!=='all')rows=rows.filter(r=>(r.role||'user')===opts.role);if(opts.search){const q=opts.search.toLowerCase().trim();rows=rows.filter(r=>(r.email||'').toLowerCase().includes(q)||(r.name||'').toLowerCase().includes(q)||(r.surname||'').toLowerCase().includes(q)||(r.social||'').toLowerCase().includes(q))}switch(opts.sort){case'old':rows.sort((a,b)=>a.createdAt-b.createdAt);break;case'name':rows.sort((a,b)=>(a.name||'').localeCompare(b.name||''));break;default:rows.sort((a,b)=>b.createdAt-a.createdAt)}return rows}
export function setRole(uid:string,role:Role){return updateUser(uid,{role})}